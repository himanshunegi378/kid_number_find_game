{"version":3,"sources":["views/question/components/AnswerList/answerList.module.scss","views/question/question.module.scss","components/Menu/Menu.tsx","services/quiz/NumberQuiz.ts","services/QuizMenu.ts","services/quiz/TableQuiz.ts","views/question/components/AnswerList/AnswerList.component.tsx","context/Speech.tsx","views/question/components/Score/Score.component.tsx","views/question/Question.view.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Menu","menuList","onItemSelect","map","menuItem","onClick","id","name","description","NumberQuiz","question","score","generateQuestion","text","speech","answers","number","Math","floor","random","converter","toWords","toUpperCase","i","answer","push","toString","correct","reshuffleAnswers","emit","slice","shuffledAnswers","length","index","splice","submitAnswer","answerId","find","updateScore","deltaChangeInScore","undefined","EventEmitter","quizMenu","quizObject","table","count","position","this","product","AnswerList","disabled","onAnswerClick","className","styles","answer_list","answer_list__disabled","answer_item","handleAnswerClick","context","createContext","speak","SpeechProvider","children","useSpeechSynthesis","cancel","speaking","supported","handleSpeak","useCallback","options","Provider","value","Score","style","QuestionView","obj","useState","setQuestion","setQuizObject","setScore","isDisabled","setIsDisabled","useContext","history","useHistory","useEffect","onNewQuestion","newQuestion","onScoreChange","on","removeListener","isCorrect","setTimeout","question_container","App","React","currentQuizObectId","setCurrentQuizObjectId","exact","path","menuItemId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.b4118bf7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"answer_list\":\"answerList_answer_list__sXq9W\",\"answer_item\":\"answerList_answer_item__39PDq\",\"answer_list__disabled\":\"answerList_answer_list__disabled__2KlDf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question_container\":\"question_question_container__2hzZ1\"};","type MenuList = { id: string, name: string, description: string }[]\nexport function Menu({ menuList,onItemSelect }: { menuList: MenuList,onItemSelect: (itemId:string) => void }) {\n    return <div><ul>\n        {menuList.map((menuItem => <li onClick={()=>{\n            onItemSelect(menuItem.id)\n        }}>\n            <h3>{menuItem.name}</h3>\n            <p>{menuItem.description}</p>\n        </li>))}\n    </ul></div>\n}","import { QuestionModel } from \"../../models/question.model\";\n//@ts-ignore\nimport converter from \"number-to-words\";\nimport { EventEmitter } from 'events';\nimport { IQuiz } from \"./IQuiz\";\n\nexport class NumberQuiz extends EventEmitter implements IQuiz {\n    question: QuestionModel | undefined;\n    score: number\n\n    constructor() {\n        super();\n        this.question = undefined\n        this.score = 0\n    }\n\n    generateQuestion = () => {\n        const question: QuestionModel = {\n            question: {\n                text: '',\n                speech: ''\n            },\n            answers: []\n        }\n\n        const number = Math.floor(Math.random() * 100) + 1;\n        question.question = converter.toWords(number).toUpperCase();\n        // generate possible wrong answers\n        for (let i = 0; i < 3; i++) {\n            const answer = Math.floor(Math.random() * 100) + 1;\n            if (number !== answer) {\n                question.answers.push({\n                    id: answer.toString(),\n                    answer: answer.toString(),\n                    correct: false\n                })\n            }\n        }\n        // generate correct answer\n        question.answers.push({\n            id: number.toString(),\n            answer: number.toString(),\n            correct: true\n        })\n\n        question.answers = this.reshuffleAnswers(question);\n        this.question = question;\n        this.emit(\"question\", question);\n    }\n\n    private reshuffleAnswers = (question: QuestionModel) => {\n        const answers = question.answers.slice();\n        const shuffledAnswers = [];\n        while (answers.length > 0) {\n            const index = Math.floor(Math.random() * answers.length);\n            shuffledAnswers.push(answers[index]);\n            answers.splice(index, 1);\n        }\n        return shuffledAnswers;\n    }\n\n    submitAnswer = (answerId: string) => {\n        if (!this.question) return false;\n        const answer = this.question.answers.find(answer => answerId === answer.id);\n        if (answer?.correct) {\n            this.updateScore(1);\n            return true;\n        }\n        this.updateScore(-1);\n        return false;\n    }\n\n    private updateScore = (deltaChangeInScore: number) => {\n        this.score += deltaChangeInScore;\n        this.emit(\"score\", this.score);\n    }\n}","import { NumberQuiz } from \"./quiz/NumberQuiz\";\nimport { TableQuiz } from \"./quiz/TableQuiz\";\n\nexport const quizMenu = [\n    {\n        id: '1',\n        name: 'Number Quiz',\n        description: 'A quiz where you have to choose the correct number.',\n        quizObject: NumberQuiz,\n    },\n    {\n        id: '2',\n        name: 'Table Quiz',\n        description: 'A quiz where you have to choose the Table answer.',\n        quizObject: TableQuiz,\n    }\n]","import { EventEmitter } from 'events';\nimport { QuestionModel } from '../../models/question.model';\nimport { IQuiz } from './IQuiz';\n\nexport class TableQuiz extends EventEmitter implements IQuiz {\n    question: QuestionModel | undefined;\n    score: number\n    table: { count: number, position: number };\n    constructor() {\n        super();\n        this.question = undefined;\n        this.table = { count: 2, position: 1 };\n        this.score = 0;\n    }\n    generateQuestion(): void {\n        const question: QuestionModel = {\n            question: {\n                text: '',\n                speech: ''\n            },\n            answers: []\n        }\n        question.question = {\n            text: `${this.table.count} X ${this.table.position}`,\n            speech: `${this.table.count} ${this.table.position} j`\n        }\n        let i = this.table.position - 1;\n        while (question.answers.length <= 3) {\n            const product = this.table.count * i;\n            question.answers.push({\n                id: `${product}`,\n                answer: `${product}`,\n                correct: product === this.table.count * this.table.position\n            });\n            i++;\n        }\n        question.answers = this.reshuffleAnswers(question);\n        this.question = question;\n        this.emit('question', question);\n\n    }\n\n    private reshuffleAnswers = (question: QuestionModel) => {\n        const answers = question.answers.slice();\n        const shuffledAnswers = [];\n        while (answers.length > 0) {\n            const index = Math.floor(Math.random() * answers.length);\n            shuffledAnswers.push(answers[index]);\n            answers.splice(index, 1);\n        }\n        return shuffledAnswers;\n    }\n\n    submitAnswer(answerId: string): boolean {\n        if (!this.question) return false;\n        const answer = this.question.answers.find(answer => answerId === answer.id);\n        if (answer?.correct) {\n            this.updateScore(1);\n            if (this.table.position === 9) {\n                this.table.count++;\n                this.table.position = 1;\n            } else {\n                this.table.position++;\n            }\n\n            return true;\n        }\n        this.updateScore(-1);\n        return false;\n    }\n    private updateScore = (deltaChangeInScore: number) => {\n        this.score += deltaChangeInScore;\n        this.emit(\"score\", this.score);\n    }\n}","import { Fragment } from \"react\"\nimport styles from './answerList.module.scss'\n\ntype AnswerListProps = {\n    answers: { id: string, answer: string }[];\n    disabled?: boolean;\n    onAnswerClick: (answer: string) => void;\n}\n\nexport function AnswerList({ answers, disabled = false, onAnswerClick }: AnswerListProps) {\n    const handleAnswerClick = (answer: string) => {\n        if (!disabled) {\n            onAnswerClick(answer)\n        }\n    }\n    return <Fragment>\n        <ul className={`${styles.answer_list} ${disabled && styles.answer_list__disabled}`}>\n            {answers.map(({id,answer}, index) => <li key={index} className={styles.answer_item} onClick={() => { handleAnswerClick(id) }}>{answer}</li>)}\n        </ul>\n    </Fragment>\n}","import { createContext, PropsWithChildren, useCallback, useContext } from \"react\";\n//@ts-ignore\nimport { useSpeechSynthesis } from 'react-speech-kit';\n\ntype speakType = { text: string };\n\ntype contextType = {\n    speak: (options: speakType) => void;\n}\n\nconst context = createContext<contextType>({ speak: () => { } });\n\nexport function SpeechProvider({ children }: PropsWithChildren<{}>) {\n    const { speak, cancel, speaking, supported } = useSpeechSynthesis();\n\n    const handleSpeak = useCallback((options: speakType) => {\n        if (!supported) {\n            return;\n        }\n        if (speaking) {\n            cancel();\n        }\n        speak(options);\n    }, [cancel, speak, speaking, supported]);\n\n    return (\n        <context.Provider value={{ speak: handleSpeak }}>\n            {children}\n        </context.Provider>\n    );\n}\n\nexport function useSpeech() {\n    const { speak } = useContext(context);\n    return speak;\n}\n","export function Score({ score, onClick = () => { } }: { score: number, onClick?: (text: string) => void }) {\n    return <div style={{\n        \"fontSize\": `xx-large`,\n        \"fontWeight\": 500\n    }}\n        onClick={() => {\n            onClick(score.toString());\n        }}\n    >\n        Score : <i>{score}</i>\n    </div>\n}","import { QuestionModel } from \"../../models/question.model\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport styles from './question.module.scss';\nimport { AnswerList } from \"./components/AnswerList/AnswerList.component\";\nimport { useSpeech } from \"../../context/Speech\";\nimport { Score } from \"./components/Score/Score.component\";\nimport { useHistory } from \"react-router-dom\";\n\n\nexport function QuestionView({ quizObject: obj }: { quizObject: any }) {\n    const [{ question, answers }, setQuestion] = useState<QuestionModel>({ question:{ text: 'na', speech: 'na'}, answers: [] });\n    const [quizObject, setQuizObject] = useState<any>();\n    const [score, setScore] = useState(0);\n    const [isDisabled, setIsDisabled] = useState(false);\n    const speak = useSpeech();\n    const history = useHistory();\n    useEffect(() => {\n        if (!obj) {\n            history.push('/')\n            return;\n        }\n        setQuizObject(new obj());\n    }, [history, obj])\n\n\n    useEffect(() => {\n        if (!quizObject) return;\n        const onNewQuestion = (newQuestion: QuestionModel) => {\n            setQuestion(newQuestion);\n            setIsDisabled(false);\n        }\n\n        const onScoreChange = (score: number) => {\n            setScore(score);\n        }\n\n        quizObject.on('question', onNewQuestion)\n        quizObject.on('score', onScoreChange)\n        quizObject.generateQuestion();\n        return () => {\n            quizObject.removeListener('question', onNewQuestion)\n            quizObject.removeListener('score', onScoreChange)\n        }\n\n    }, [quizObject]);\n\n    const handleAnswerClick = useCallback((answerId: string) => {\n        const isCorrect: boolean = quizObject.submitAnswer(answerId);\n        setIsDisabled(true);\n        if (isCorrect) {\n            speak({ text: `Correct!` });\n        } else {\n            speak({ text: `Wrong!` });\n        }\n        setTimeout(() => {\n            quizObject.generateQuestion();\n        }, 1000);\n    }, [quizObject, speak])\n\n    return <div className={styles.question_container}>\n\n        <Score score={score} onClick={(score: string) => {\n            speak({ text: score });\n        }} />\n\n        <h1 onClick={() => {\n            speak({ text: question.speech });\n        }}>\n            {question.text}\n        </h1>\n        <AnswerList disabled={isDisabled} answers={answers.map(({ correct, ...answer }) => answer)} onAnswerClick={handleAnswerClick} />\n\n    </div>;\n}","import React from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport './App.css';\nimport { Menu } from './components/Menu/Menu';\nimport { quizMenu } from './services/QuizMenu';\nimport { QuestionView } from \"./views/question/Question.view\";\n\n\nfunction App() {\n  const [currentQuizObectId, setCurrentQuizObjectId] = React.useState<any>(null);\n  const history = useHistory();\n  const handleMenuItemSelect = (menuItemId: string) => {\n    setCurrentQuizObjectId(menuItemId);\n    history.push('/quiz')\n  }\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\">\n          <Menu menuList={quizMenu.map(({ quizObject, ...data }) => data)} onItemSelect={handleMenuItemSelect} />\n        </Route>\n        <Route path=\"/quiz\" >\n          <QuestionView quizObject={quizMenu.find(menuItem => menuItem.id === currentQuizObectId)?.quizObject} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SpeechProvider } from './context/Speech';\nimport {\n  BrowserRouter as Router,\n\n} from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <SpeechProvider>\n        <App />\n      </SpeechProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}