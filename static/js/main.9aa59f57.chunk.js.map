{"version":3,"sources":["views/question/components/AnswerList/AnswerList.component.tsx","services/generateQuestion.ts","services/reshuffleAnswers.ts","context/Speech.tsx","views/question/components/Score/Score.component.tsx","views/question/Question.view.tsx","App.tsx","reportWebVitals.ts","index.tsx","views/question/components/AnswerList/answerList.module.scss","views/question/question.module.scss"],"names":["AnswerList","answers","disabled","onAnswerClick","className","styles","answer_list","answer_list__disabled","map","answer","index","answer_item","onClick","handleAnswerClick","generateQuestion","question","number","Math","floor","random","converter","toWords","toUpperCase","i","push","toString","correct","slice","shuffledAnswers","length","splice","reshuffleAnswers","context","createContext","speak","SpeechProvider","children","useSpeechSynthesis","cancel","speaking","supported","handleSpeak","useCallback","options","Provider","value","useSpeech","useContext","Score","score","style","text","QuestionView","useState","setQuestion","right","wrong","record","setRecord","isDisabled","setIsDisabled","useEffect","handleNewQuestion","answerId","prevRecord","setTimeout","question_container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9aa59f57.chunk.js","sourcesContent":["import { Fragment } from \"react\"\nimport styles from './answerList.module.scss'\n\ntype AnswerListProps = {\n    answers: string[];\n    disabled?: boolean;\n    onAnswerClick: (answer: number) => void;\n}\n\nexport function AnswerList({ answers, disabled = false, onAnswerClick }: AnswerListProps) {\n    const handleAnswerClick = (answer: number) => {\n        if (!disabled) {\n            onAnswerClick(answer)\n        }\n    }\n    return <Fragment>\n        <ul className={`${styles.answer_list} ${disabled && styles.answer_list__disabled}`}>\n            {answers.map((answer, index) => <li key={index} className={styles.answer_item} onClick={() => { handleAnswerClick(index) }}>{answer}</li>)}\n        </ul>\n    </Fragment>\n}","import { QuestionModel } from \"../models/question.model\";\n//@ts-ignore\nimport converter from \"number-to-words\";\nimport { reshuffleAnswers } from \"./reshuffleAnswers\";\n\nexport const generateQuestion = (): QuestionModel => {\n    const question: QuestionModel = {\n        question: \"\",\n        answers: []\n    }\n\n    const number = Math.floor(Math.random() * 100) + 1;\n    question.question = converter.toWords(number).toUpperCase();\n\n    for (let i = 0; i < 3; i++) {\n        const answer = Math.floor(Math.random() * 100) + 1;\n        if (number !== answer) {\n            question.answers.push({\n                answer: answer.toString(),\n                correct: false\n            })\n        }\n    }\n    question.answers.push({\n        answer: number.toString(),\n        correct: true\n    })\n\n    question.answers = reshuffleAnswers(question);\n\n    return question;\n}\n","import { QuestionModel } from \"../models/question.model\";\n\nexport const reshuffleAnswers = (question: QuestionModel) => {\n    const answers = question.answers.slice();\n    const shuffledAnswers = [];\n    while (answers.length > 0) {\n        const index = Math.floor(Math.random() * answers.length);\n        shuffledAnswers.push(answers[index]);\n        answers.splice(index, 1);\n    }\n    return shuffledAnswers;\n}","import { createContext, PropsWithChildren, useCallback, useContext } from \"react\";\n//@ts-ignore\nimport { useSpeechSynthesis } from 'react-speech-kit';\n\ntype speakType = { text: string };\n\ntype contextType = {\n    speak: (options: speakType) => void;\n}\n\nconst context = createContext<contextType>({ speak: () => { } });\n\nexport function SpeechProvider({ children }: PropsWithChildren<{}>) {\n    const { speak, cancel, speaking, supported } = useSpeechSynthesis();\n\n    const handleSpeak = useCallback((options: speakType) => {\n        if (!supported) {\n            return;\n        }\n        if (speaking) {\n            cancel();\n        }\n        speak(options);\n    }, [cancel, speak, speaking, supported]);\n\n    return (\n        <context.Provider value={{ speak: handleSpeak }}>\n            {children}\n        </context.Provider>\n    );\n}\n\nexport function useSpeech() {\n    const { speak } = useContext(context);\n    return speak;\n}\n","import { useSpeech } from \"../../../../context/Speech\"\n\nexport function Score({ score }: { score: number }) {\n    const speak = useSpeech()\n    return <div style={{\n        \"fontSize\": `xx-large`,\n        \"fontWeight\": 500\n    }}>\n        Score : <i onClick={() => {\n            speak({ text: score.toString() })\n        }} >{score}</i>\n    </div>\n}","import { QuestionModel } from \"../../models/question.model\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport styles from './question.module.scss';\nimport { AnswerList } from \"./components/AnswerList/AnswerList.component\";\nimport { generateQuestion } from \"../../services/generateQuestion\";\nimport { useSpeech } from \"../../context/Speech\";\nimport { Score } from \"./components/Score/Score.component\";\n\ntype RecordType = { right: number, wrong: number }\n\nexport function QuestionView() {\n    const [{ question, answers }, setQuestion] = useState<QuestionModel>(generateQuestion());\n    const [record, setRecord] = useState<RecordType>({ right: 0, wrong: 0 });\n    const [isDisabled, setIsDisabled] = useState(false);\n    const speak = useSpeech();\n    useEffect(() => {\n        setQuestion(generateQuestion());\n    }, [])\n\n    // make new question and enable selection button\n    const handleNewQuestion = () => {\n        setQuestion(generateQuestion());\n        setIsDisabled(false);\n    }\n\n    const handleAnswerClick = useCallback((answerId: number) => {\n        const answer = answers[answerId];\n        setIsDisabled(true);\n        if (answer.correct) {\n            speak({ text: `Correct!` });\n            setRecord(prevRecord => ({ ...prevRecord, right: prevRecord.right + 1 }));\n        } else {\n            speak({ text: `Wrong!` });\n            setRecord(prevRecord => ({ ...prevRecord, wrong: prevRecord.wrong + 1 }));\n        }\n        setTimeout(handleNewQuestion, 1000);\n    }, [answers, speak])\n\n    return <div className={styles.question_container}>\n\n        <Score score={record.right - record.wrong} />\n\n        <h1 onClick={() => {\n            speak({ text: question });\n        }}>\n            {question}\n        </h1>\n        <AnswerList disabled={isDisabled} answers={answers.map(({ answer }) => answer)} onAnswerClick={handleAnswerClick} />\n\n    </div>;\n}","import React from 'react';\nimport './App.css';\nimport { QuestionView } from \"./views/question/Question.view\";\n\n\nfunction App() {\n\n  return (\n    <div>\n      <QuestionView />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SpeechProvider } from './context/Speech';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SpeechProvider>\n      <App />\n    </SpeechProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answer_list\":\"answerList_answer_list__sXq9W\",\"answer_item\":\"answerList_answer_item__39PDq\",\"answer_list__disabled\":\"answerList_answer_list__disabled__2KlDf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question_container\":\"question_question_container__2hzZ1\"};"],"sourceRoot":""}